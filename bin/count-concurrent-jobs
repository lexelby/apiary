#!/usr/bin/env python

import sys
import cPickle
from heapq import heappush, heappop
import fileinput


class Job(object):
    def __init__(self, start_time, end_time):
        self.start_time = start_time
        self.end_time = end_time

    def __cmp__(self, other):
        return cmp(self.end_time, other.end_time)


def main():
    jobs = []
    max_concurrency = 0

    job_file = open(sys.argv[1])
    job_num = 0

    try:
        while True:
            job_spec = cPickle.load(job_file)
            job_num += 1

            if job_num % 1000 == 0:
                print "read %d jobs, max concurrency so far: %d" % (job_num, max_concurrency)

            if not job_spec[1]:
                continue

            current_timestamp = job_spec[1][0][0]
            task_times = [task[0] for task in job_spec[1]]
            job = Job(start_time=current_timestamp, end_time=task_times[-1])
            heappush(jobs, job)

            while jobs and jobs[0].end_time <= current_timestamp:
                heappop(jobs)

            concurrency = len(jobs)
            max_concurrency = max(max_concurrency, concurrency)
    except EOFError:
        pass

    print str(max_concurrency)

if __name__ == '__main__':
    sys.exit(main())
